name: Spring Boot & Gradle CD

on:
  push:
    branches: [ "main" ]

jobs:
  CD:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: make application.yml
        if: true
        run: |
          cd ./src/main/resources
          rm -rf ./application.yml
          touch ./application.yml
          echo "${{ secrets.STACK_KNOWLEDGE_BACKEND_ENV }}" > ./application.yml
        shell: bash

      - name: Set up JDK 11 job has success
        if: ${{ success() }}
        run: echo "jdk 11 job succeeded"

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name : Setup Gradls's permission
        run : chmod +x gradlew

      - name: Build with Gradle
        run : ./gradlew bootjar

  prod-CD:
    needs: CD
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: make application.yml
        if: true
        run: |
          cd ./src/main/resources
          rm -rf ./application.yml
          touch ./application.yml
          echo "${{ secrets.STACK_KNOWLEDGE_BACKEND_ENV }}" > ./application.yml
        shell: bash

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name : Setup Gradls's permission
        run : chmod +x gradlew

      - name: Build with Gradle
        run : ./gradlew clean build --exclude-task test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name stack-knowledge \
            --ignore-hidden-files \
            --s3-location s3://stack-knowledge/$GITHUB_SHA.zip \
            --source .

      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name stack-knowledge \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name stack-knowledge \
            --s3-location bucket=stack-knowledge,key=$GITHUB_SHA.zip,bundleType=zip

      - name: STACK_KNOWLEDGE Backend CD Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: ${{ success() }}
        with:
          title: ✅ Stack Knowledge Backend CD 성공! ✅
          webhook: ${{ secrets.STACK_KNOWLEDGE_DISCORD_WEBHOOK }}
          color: 00FF00

      - name: STACK_KNOWLEDGE Backend CD Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: ${{ failure() }}
        with:
          title: ❗️ Stack Knowledge Backend CD 실패! ❗️
          webhook: ${{ secrets.STACK_KNOWLEDGE_DISCORD_WEBHOOK }}
          color: FF0000
